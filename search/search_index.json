{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Velkommen til DBI-projektet","text":"<p>Anders, Claudia og Isabella</p>"},{"location":"#introduktion","title":"Introduktion","text":"<p>DBI er et dansk firma der g\u00e5r ind for brand- og sikringsteknisk Institut. De har haft sm\u00e5 problemer med deres system og de derfra er kommet til os. Vi er blevet delt op i grupper mellem den anden uddannelse Digital konceptudvikling og Webudvikler (den vi er p\u00e5). </p> <p>Vi har f\u00e5et udleveret et design concept fra dem som vi derefter skulle kode den med vores Frontend teknologi samt bruge viden om firebase, da det var vores host.</p>"},{"location":"#arkitektur-teknologivalg","title":"Arkitektur &amp; teknologivalg","text":"<p>Vi har som gruppe valgt at anvende Vue 3 som vores frontend og det har vi v\u00e6ret meget glade for. Den m\u00e5de Vue 3 arbejder p\u00e5 er en one page. Det vil se at den best\u00e5r af en onepage men compumenter som for det til at ligne en multipage. </p>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Git</li> <li>Clean Code</li> <li>Tests</li> </ul>"},{"location":"cleanCode/","title":"Clean Code","text":""},{"location":"cleanCode/#clean-code-og-statisk-kodeanalyse","title":"Clean code og Statisk kodeanalyse","text":"<p>Der har v\u00e6ret fokus p\u00e5 Clean Code principperne. For at mindske code smells har vi taget disse tiltag:</p> <ul> <li>camelCasing som naming convention</li> <li>ESLINT til f\u00e6lles h\u00e5ndh\u00e6vede regler</li> <li>SRP og DRY hvor koden opdeles efter ansvar og kan genbruges</li> <li>Selvdokumenterende kode, hvor variabel- og funktionsnavne beskriver form\u00e5let</li> </ul> <p>Et eksempel p\u00e5, hvordan vi tiltag i praksis, denne kan genbruges fordi den ligger i en store</p> <pre><code>const changeParentId = (unitId: string, newParentId: string) =&gt; {\n    changeUnitParentId(unitId, newParentId).then(() =&gt; {\n      visibleUnits.value = visibleUnits.value.filter(unit =&gt; unit.id !== unitId);\n    }).catch(error =&gt; {\n      throw new Error('Kunne ikke opdatere parent id p\u00e5 enhed: ' + error);\n    });\n  };\n</code></pre>"},{"location":"cleanCode/#eslint","title":"Eslint","text":"<p>Vi har brugt en r\u00e6kke ESLint-regler for at opretholde en ensartet stil og forbedre kvaliteten af koden. </p> <p>ESLINT-reglerne ses nedenst\u00e5ende:</p> <pre><code>rules: {\n        //'vue/component-tags-order': ['error', {\n           // order: ['script', 'template', 'style']\n       // }],\n        'arrow-spacing': ['error', { 'before': true, 'after': true }],\n        'brace-style': ['error', '1tbs'],\n        'comma-dangle': ['error', 'always-multiline'],\n        //'line-comment-position': ['error', 'always'],\n        //'array-bracket-newline': ['error', 'consistent'],\n        'eqeqeq': ['error', 'always'],\n        'indent': ['error', 2],\n        'no-eval': ['error'],\n        //'no-trailing-spaces': ['error'],\n        'no-unused-vars': ['error'],\n        'no-var': ['error'],\n        'prefer-const': ['error'],\n        'quotes': ['error', 'single'],\n        'semi': ['error', 'always'],\n        'keyword-spacing': [\"error\", { \"before\": true }],\n    }\n</code></pre>"},{"location":"cleanCode/#refaktorering","title":"Refaktorering","text":"<p>Ikke selvdokumenterende navngivning</p> <p>For at opretholde vores egne standarder b\u00f8r der ikke anvendes enkelte bogstaver som navngivning, da det kan v\u00e6re sv\u00e6rt at l\u00e6se og forst\u00e5 koden.</p> <ul> <li>\"q\" kunne f.eks. kaldes \"query\"</li> <li>\"d\" kunne f.eks. kaldes \"queryDocument\"</li> </ul> <pre><code>  const q = query(\n    collection(db, 'folders'),\n    where('parentId', '==', currentFolderId.value),\n    where('userId', '==', authStore.userId),\n  );\n\n  unsubscribe = onSnapshot(q, snap =&gt; {\n    folders.value = snap.docs.map(d =&gt; ({\n      id: d.id,\n      name: d.data().name as string,\n      selected: false,\n      type: 'folder',\n    }));\n  });\n</code></pre>"},{"location":"cleanCode/#navigation","title":"Navigation","text":"<ul> <li>Start side</li> <li>Git</li> <li>Test</li> </ul>"},{"location":"git/","title":"Git","text":""},{"location":"git/#git-og-versonsstyring","title":"Git og Versonsstyring","text":"<p>I projektet har vi brugt Git som versionsstyring. Det har gjort det muligt at holde styr p\u00e5 \u00e6ndringer i koden og samtidig samarbejde effektivt i gruppen. Git har is\u00e6r v\u00e6ret nyttigt, fordi det gemmer hele historikken over projektets udvikling og g\u00f8r det nemt at g\u00e5 frem og tilbage mellem tidligere versioner af koden.</p> <p>Fordele ved versionsstyring i projektet:</p> <ul> <li>Nem adgang til tidligere versioner af koden</li> <li>Effektivt samarbejde i grupper</li> <li>Automatisk logning af \u00e6ndringer og historik</li> </ul>"},{"location":"git/#branching-strategi","title":"Branching strategi","text":"<p>Vi har brugt en forsimplet version af gitflow som branching strategi. Alt arbejde foreg\u00e5r p\u00e5 separate feature branches. </p> <p>Main er den prim\u00e6re branch der kun indeholder testet og produktionsklar kode. Der er opsat regler, der forhindrer direkte push til main, og \u00e6ndringer kan kun tilf\u00f8jes med pull requests.</p> <p>Dev fungerer som udviklingsbranch, hvor ny funktionalitet samles inden det integreres i main. Feature branches oprettes fra dev og merges tilbage, n\u00e5r arbejdet er f\u00e6rdigt og testet. N\u00e5r en feature branch er f\u00e6rdig og merged til \u201cdev\u201d, slettes branchen typisk for at holde repositoriet rent.</p> <p></p>"},{"location":"git/#github-actions-workflows-cicd","title":"Github Actions &amp; workflows (CI/CD)","text":"<p>Github actions er anvendt til at automatisere deployment og statisk kodeanlyse flows.</p> Workflow Branch Trigger Form\u00e5l K\u00f8r ESLint Main &amp; dev Pull request Sikrer at koden f\u00f8lger ESLint-regler f\u00f8r merge Deploy side med Firebase Hosting Main Push G\u00f8r ny version af applikationen tilg\u00e6ngelig live <p>Ved at bruge den branching strategi vi bruger sammen med disse flows, underst\u00f8tter vi CI/CD. </p> <p>Continous Integration - koden automatisk testes ved hj\u00e6lp af eslint workflow p\u00e5 pull requests.</p> <p>Continous Delivery - Vi manuelt v\u00e6lger hvorn\u00e5r koden skal udgives ved at push dev ind i main og kun p\u00e5 main deploys siden.</p>"},{"location":"git/#yaml-fil-til-eslint-workflow","title":"YAML-fil til ESLINT-workflow","text":"<pre><code>name: Run eslint on pull requests\n\non:\npull_request:\nbranches:\n- dev\n- main\n\njobs:\nlint:\nname: Run ESLint\nruns-on: ubuntu-latest\n\n    steps:\n      - name: Pull code to virtual machine\n        uses: actions/checkout@v4\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run ESLint\n        run: npm run lint\n</code></pre>"},{"location":"git/#navigation","title":"Navigation","text":"<ul> <li>Start side</li> <li>Clean Code</li> <li>Test</li> </ul>"},{"location":"tests/","title":"Unit test &amp; E2E test","text":""},{"location":"tests/#unit-test","title":"Unit test","text":"<p>Unit tests har intet med projektet at g\u00f8re.</p> <p>Unit tests kan testes ved at g\u00e5 ind i /unitTest mappen og k\u00f8re kommandoen:</p> <pre><code>npm run unitTest\n</code></pre> <p>Funktioner der k\u00f8res test p\u00e5</p> <pre><code>function add(a, b) {\n  if (typeof a !== 'number' || typeof b !== 'number') {\n    throw new Error('Expected a number');\n  }\n  return a + b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new Error('Cannot divide by zero');\n  }\n  return a / b;\n}\n\nfunction divide2(a, b) {\n  if (b === 0) {\n    throw new Error('Cannot divide by zero');\n  }\n  return a / b;\n}\n\n// eslint-disable-next-line no-undef\nmodule.exports = {\n  add,\n  subtract,\n  multiply,\n  divide,\n  divide2,\n};\n</code></pre> <p>Tests til funktionerne</p> <pre><code>// calculator.test.js\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst calculator = require('./calculator.js');\n\n////////////////////\n//****TEST ADD****//\n////////////////////\ntest('test add 1 + 2 is 3', () =&gt; {\n  expect(calculator.add(1, 2)).toBe(3);\n});\n\ntest('test add \"abe\" + 2 throws error', () =&gt; {\n  expect(() =&gt; calculator.add('abe', 2)).toThrow();\n});\n\ntest('test add -10 plus -10 is -20', () =&gt; {\n  expect(calculator.add(-10, -10)).toBe(-20);\n});\n\ntest('test add 10.5 add 10.5 is 21', () =&gt; {\n  expect(calculator.add(10.5, 10.5)).toBe(21);\n});\n\n/////////////////////////\n//****TEST SUBTRACT****//\n/////////////////////////\ntest('test subtract 4 - 5 is -1', () =&gt; {\n  expect(calculator.subtract(4, 5)).toBe(-1);\n});\n\ntest('test subtract 5 - 4 is 1', () =&gt; {\n  expect(calculator.subtract(5, 4)).toBe(1);\n});\n\ntest('test subtract -10 minus -10 is -20', () =&gt; {\n  expect(calculator.subtract(-10, -10)).toBe(0);\n});\n\n/////////////////////////\n//****TEST MULTIPLY****//\n/////////////////////////\ntest('test multiply 5 times 5 is 25', () =&gt; {\n  expect(calculator.multiply(5, 5)).toBe(25);\n});\n\ntest('test multiply 5 times 0 is 0', () =&gt; {\n  expect(calculator.multiply(5, 0)).toBe(0);\n});\n\n///////////////////////\n//****TEST DIVIDE****//\n///////////////////////\ntest('test divide 20 divided by 2 is 10', () =&gt; {\n  expect(calculator.divide(20, 2)).toBe(10);\n});\n\n\n//Tester om fejlen er en instans af Error-klassen.\n//Uden Error virker det ogs\u00e5, men den tester kun om der returneres en fejl.\ntest('test divide 20 divided by 0 returns error', () =&gt; {\n  expect(() =&gt; calculator.divide(20, 0)).toThrow(Error);\n});\n\n\n\n</code></pre>"},{"location":"tests/#end-to-end-test","title":"End-to-end test","text":"<p>Opret mappe</p> <pre><code>describe('Folder creation flow', () =&gt; {\n  const baseUrl = 'https://dbi-project-61b95.web.app/';\n\n  beforeEach(() =&gt; {\n    cy.visit(baseUrl);\n\n    // login\n    cy.get('#email').should('be.visible').type('user1@mail.com');\n    cy.get('#password').should('be.visible').type('123456');\n    cy.get('button[aria-label=\"Log ind\"]').should('be.visible').click();\n  });\n\n  it('creates and then deletes the folder \"testmappe\"', () =&gt; {\n    // opret mappe\n    cy.contains('button', 'Opret').click();\n    cy.contains('li', 'Mappe').click();\n    cy.get('#folderName').should('be.visible').type('testmappe');\n    cy.get('button.basicButton[aria-label=\"Opret mappe\"]').click();\n    cy.get('.folderContainer').contains('testmappe').should('exist');\n\n    cy.contains('.folderContainer', 'testmappe')\n    .within(() =&gt; {\n    // spring visibility-check over og klik alligevel\n    cy.get('button.menuDots')\n      .click({ force: true });\n\n    cy.contains('li', 'Slet')\n      .click({ force: true });\n  });\n\n    // evt. en assertion p\u00e5 at mappen er v\u00e6k\n    cy.get('.folderContainer').contains('testmappe').should('not.exist');\n  });\n});\n</code></pre> <p>Opret enhed</p> <pre><code>describe('Folder creation flow', () =&gt; {\n  const baseUrl = 'https://dbi-project-61b95.web.app/';\n\n  beforeEach(() =&gt; {\n    cy.visit(baseUrl);\n\n    // login\n    cy.get('#email').should('be.visible').type('user1@mail.com');\n    cy.get('#password').should('be.visible').type('123456');\n    cy.get('button[aria-label=\"Log ind\"]').should('be.visible').click();\n  });\n\n  it('creates folder \"testmappe\" and a unit called \"testenhed\" inside it, then deletes it at the end', () =&gt; {\n    // opret mappe\n    cy.contains('button', 'Opret').click();\n    cy.contains('li', 'Enhed').click();\n    cy.get('#Name').should('be.visible').type('testenhed');\n    cy.get('.card')\n        .first()\n       .within(() =&gt; {\n        cy.get('button[aria-label=\"Videre til n\u00e6ste trin\"]')\n        .click({ force: true });\n  });\n    cy.get('#description').should('be.visible').type('en test enhed');\n        cy.get('.card')\n        .first()\n       .within(() =&gt; {\n        cy.get('button[aria-label=\"Videre til n\u00e6ste trin\"]')\n        .click({ force: true });\n  });\n    cy.get('#sync').should('be.visible').type('12');\n    cy.get('button[aria-label=\"Udf\u00f8r\"]').should('be.visible').click();\n    cy.get('.folderContainer').contains('testenhed').should('exist');\n\n    cy.contains('.folderContainer', 'testenhed')\n    .within(() =&gt; {\n    // spring visibility-check over og klik alligevel\n    cy.get('button.menuDots')\n      .click({ force: true });\n\n    cy.contains('li', 'Slet')\n      .click({ force: true });\n  });\n\n    // evt. en assertion p\u00e5 at mappen er v\u00e6k\n    cy.get('.folderContainer').contains('testenhed').should('not.exist');\n  });\n});\n\n</code></pre>"}]}