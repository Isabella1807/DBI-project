{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Velkommen til DBI-projektet","text":"<p>Anders, Claudia og Isabella</p>"},{"location":"#introduktion","title":"Introduktion","text":"<p>DBI er et dansk firma der g\u00e5r ind for brand- og sikringsteknisk Institut. De har haft sm\u00e5 problemer med deres system og de derfra er kommet til os. Vi er blevet delt op i grupper mellem den anden uddannelse Digital konceptudvikling og Webudvikler (den vi er p\u00e5). </p> <p>Vi har f\u00e5et udleveret et design concept fra dem som vi derefter skulle kode den med vores Frontend teknologi samt bruge viden om firebase, da det var vores host.</p>"},{"location":"#arkitektur-teknologivalg","title":"Arkitektur &amp; teknologivalg","text":"<p>Vi har som gruppe valgt at anvende Vue 3 som vores frontend og det har vi v\u00e6ret meget glade for. Den m\u00e5de Vue 3 arbejder p\u00e5 er en one page. Det vil se at den best\u00e5r af en onepage men compumenter som for det til at ligne en multipage. </p>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>StartProjektet</li> <li>Git</li> <li>Clean Code</li> </ul>"},{"location":"cleanCode/","title":"Clean Code","text":""},{"location":"cleanCode/#clean-code-og-statisk-kodeanalyse","title":"Clean code og Statisk kodeanalyse","text":"<p>Bag Clean Code har vi sikre os at kode er l\u00e6sbar og struktureret. For at opn\u00e5 dette har vi valgt at f\u00f8lge camelCase-navngivningskonventioner for vores variabler. Dette g\u00f8r det lettere at forst\u00e5 og navigere i koden, da alle navne f\u00f8lger en ensartet struktur og giver en naturlig l\u00e6seflow.</p> <p>For at kunne anvende Statisk kodeanalyse har vi gjort brug af ESLint, som har hjulpet med at sikre, at koden f\u00f8lger de n\u00f8dvendige strukturelle retningslinjer. ESLint har v\u00e6ret med til at rense koden og give dem den n\u00f8dvendige struktur. </p> <p>Et eksempel p\u00e5, hvordan vi anvender dette, kan ses i f\u00f8lgende kode:</p> <pre><code>onMounted(() =&gt; {\n  if (!['list', 'detailed'].includes(currentView.value)) {\n    currentView.value = 'detailed';\n    localStorage.setItem('currentView', 'detailed');\n  }\n});\n</code></pre> <p>Vi har brugt en r\u00e6kke ESLint-regler for at opretholde en ensartet stil og forbedre kvaliteten af koden. Her er et udpluk af de vigtigste regler:</p> <pre><code>rules: {\n        //'vue/component-tags-order': ['error', {\n           // order: ['script', 'template', 'style']\n       // }],\n        'arrow-spacing': ['error', { 'before': true, 'after': true }],\n        'brace-style': ['error', '1tbs'],\n        'comma-dangle': ['error', 'always-multiline'],\n        //'line-comment-position': ['error', 'always'],\n        //'array-bracket-newline': ['error', 'consistent'],\n        'eqeqeq': ['error', 'always'],\n        'indent': ['error', 2],\n        'no-eval': ['error'],\n        //'no-trailing-spaces': ['error'],\n        'no-unused-vars': ['error'],\n        'no-var': ['error'],\n        'prefer-const': ['error'],\n        'quotes': ['error', 'single'],\n        'semi': ['error', 'always'],\n        'keyword-spacing': [\"error\", { \"before\": true }],\n    }\n</code></pre>"},{"location":"cleanCode/#refaktorering","title":"Refaktorering","text":"<p>En central del af vores udviklingsproces har v\u00e6ret refaktorering, som vi l\u00f8bende har arbejdet med for at forbedre kodens struktur, samtidig med at funktionaliteten er bibeholdt. Et konkret eksempel p\u00e5 dette er brugen af tree shaking. Tree shaking hj\u00e6lper med at fjerne ubrugte kodefunktioner under produktionen og reducerer dermed filst\u00f8rrelsen. Dette g\u00f8r frontenden b\u00e5de hurtigere og mere effektiv, hvilket er s\u00e6rligt godt, n\u00e5r vi arbejder med Vue 3.</p>"},{"location":"cleanCode/#navigation","title":"Navigation","text":"<ul> <li>Start Projektet</li> <li>Git</li> <li>Start side</li> </ul>"},{"location":"git/","title":"Git","text":""},{"location":"git/#git-og-versonsstyring","title":"Git og Versonsstyring","text":"<p>I projektet har vi brugt Git som versionsstyring. Det har gjort det muligt at holde styr p\u00e5 \u00e6ndringer i koden og samtidig samarbejde effektivt i gruppen. Git har is\u00e6r v\u00e6ret nyttigt, fordi det gemmer hele historikken over projektets udvikling og g\u00f8r det nemt at g\u00e5 frem og tilbage mellem tidligere versioner af koden.</p> <p>Fordele ved versionsstyring i projektet:</p> <ul> <li>Nem adgang til tidligere versioner af koden</li> <li>Effektivt samarbejde i grupper</li> <li>Automatisk logning af \u00e6ndringer og historik</li> </ul>"},{"location":"git/#branching-strategier","title":"Branching strategier","text":"<p>Vi har valgt en simpel og struktureret branching-strategi. Alt arbejde foreg\u00e5r p\u00e5 separate grene, alt efter hvilke opgaver der skal l\u00f8ses. Vi har en main-gren, som kun bliver opdateret, n\u00e5r vi alle er enige, og koden er gennemtestet og uden fejl. Dette hj\u00e6lper os med at sikre stabilitet og undg\u00e5 problemer i den f\u00e6rdige version af projektet.</p> <p>Fordele ved denne strategi:</p> <ul> <li>Giver bedre overblik og struktur</li> <li>G\u00f8r det nemmere at teste og godkende kode, f\u00f8r den implementeres</li> <li>Mindsker risikoen for fejl i den endelige version</li> </ul>"},{"location":"git/#git-workflows","title":"Git workflows","text":"<p>Git Flow</p> <ul> <li>Denne metode bruger flere grene, bl.a. main, develop, feature, release og hotfix. Det giver en tydelig struktur og egner sig godt til st\u00f8rre projekter, hvor der er brug for at holde styr p\u00e5 forskellige udviklingsfaser.</li> </ul> <p>GitHub Flow</p> <ul> <li>En enklere tilgang, som is\u00e6r er velegnet til webprojekter med l\u00f8bende opdateringer. Her arbejder man typisk med feature branches, som bliver flettet ind i main via pull requests. Det passer godt sammen med CI/CD-processer.</li> </ul> <p>GitLab Flow</p> <ul> <li>Bygger videre p\u00e5 Git Flow, men kombinerer det med GitLabs issue-h\u00e5ndtering. Det g\u00f8r workflowet mere fleksibelt og nemt at tilpasse afh\u00e6ngigt af, hvordan man organiserer sit udviklingsarbejde.</li> </ul>"},{"location":"git/#navigation","title":"Navigation","text":"<ul> <li>Start Projektet</li> <li>Start side</li> <li>Clean Code</li> </ul>"},{"location":"startprojekt/","title":"Start projekt","text":""},{"location":"startprojekt/#installation-opstning","title":"Installation &amp; ops\u00e6tning","text":"<p>For at starte et Vue 3 projekt skal man have en mappe oprettet p\u00e5 sin pc og derefter \u00e5bne sin terminal og hoppe ind i mappen derfra.</p> <pre><code>cd developer\n</code></pre> <p>N\u00e5r man er i sin mappe, kan man starte med at installere Vue 3. PS. Det er vigtigt at node.js er downloadet p\u00e5 pc'en.</p> <pre><code>npm init vue@latest\n</code></pre> <p>Sikre men sig at man har downloadet den nyeste version. Herefter giver du navnet p\u00e5 projekt og hopper ind i mappen</p> <pre><code>cd DBIProject\n</code></pre> <pre><code>npm install\n</code></pre> <pre><code>npm run dev\n</code></pre> <p>S\u00e5 k\u00f8re den p\u00e5 Localhost</p>"},{"location":"startprojekt/#navigation","title":"Navigation","text":"<ul> <li>StartSide</li> <li>Git</li> <li>Clean Code</li> </ul>"}]}